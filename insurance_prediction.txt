{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   id  Gender  Age  Driving_License  Region_Code  Previously_Insured  \\\n",
      "0   1    Male   44                1           28                   0   \n",
      "1   2    Male   76                1            3                   0   \n",
      "2   3    Male   47                1           28                   0   \n",
      "3   4    Male   21                1           11                   1   \n",
      "4   5  Female   29                1           41                   1   \n",
      "\n",
      "  Vehicle_Age Vehicle_Damage  Annual_Premium  Policy_Sales_Channel  Vintage  \\\n",
      "0   > 2 Years            Yes           40454                    26      217   \n",
      "1    1-2 Year             No           33536                    26      183   \n",
      "2   > 2 Years            Yes           38294                    26       27   \n",
      "3    < 1 Year             No           28619                   152      203   \n",
      "4    < 1 Year             No           27496                   152       39   \n",
      "\n",
      "   Response  \n",
      "0         1  \n",
      "1         0  \n",
      "2         1  \n",
      "3         0  \n",
      "4         0  \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "import pickle\n",
    "import gzip\n",
    "import os\n",
    "\n",
    "data = pd.read_csv('Prediction Insurance.csv')\n",
    "print(data.head(5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "label_encoder = LabelEncoder()\n",
    "data['Gender'] = label_encoder.fit_transform(data['Gender'])\n",
    "data['Vehicle_Age'] = label_encoder.fit_transform(data['Vehicle_Age'])\n",
    "data['Vehicle_Damage'] = label_encoder.fit_transform(data['Vehicle_Damage'])\n",
    "\n",
    "X = data.drop(columns=['id', 'Response'])\n",
    "y = data['Response']\n",
    "\n",
    "train_features, test_features, train_labels, test_labels = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Akurasi: 0.86\n"
     ]
    }
   ],
   "source": [
    "model = RandomForestClassifier(n_estimators=90, random_state=42)\n",
    "model.fit(train_features, train_labels)\n",
    "\n",
    "# prediksi data test_features\n",
    "predicted_labels = model.predict(test_features)\n",
    "\n",
    "# kalkulasi akurasi\n",
    "accuracy = accuracy_score(test_labels, predicted_labels)\n",
    "print(f'Akurasi: {accuracy:.2f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved successfully at c:\\Users\\Ilham\\HW-ML\\insurance_model.pkl\n"
     ]
    }
   ],
   "source": [
    "# simpen model jadi pickle\n",
    "pickle_file_path = os.path.join(os.getcwd(), 'insurance_model.pkl')\n",
    "with open(pickle_file_path, 'wb') as file:\n",
    "    pickle.dump(model, file)\n",
    "\n",
    "# konfirmasi apakah bisa tersave apa nggak\n",
    "if os.path.exists(pickle_file_path):\n",
    "    print(f'Model saved successfully at {pickle_file_path}')\n",
    "else:\n",
    "    print('Error: Model not saved')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "with gzip.open('insurance_model.pkl.gz', 'wb') as f:\n",
    "    pickle.dump(model, f)\n"
    "os.remove('insurance_model.pkl')"
   ]
  },
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}